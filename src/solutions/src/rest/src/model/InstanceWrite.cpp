/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "rt_rest_client/model/InstanceWrite.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



InstanceWrite::InstanceWrite()
{
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_group = utility::conversions::to_string_t("");
    m_groupIsSet = false;
    m_solution = utility::conversions::to_string_t("");
    m_solutionIsSet = false;
    m_persistent = false;
    m_persistentIsSet = false;
}

InstanceWrite::~InstanceWrite()
{
}

void InstanceWrite::validate()
{
    // TODO: implement validation
}

web::json::value InstanceWrite::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("group"))] = ModelBase::toJson(m_group);
    }
    if(m_solutionIsSet)
    {
        val[utility::conversions::to_string_t(U("solution"))] = ModelBase::toJson(m_solution);
    }
    if(m_persistentIsSet)
    {
        val[utility::conversions::to_string_t(U("persistent"))] = ModelBase::toJson(m_persistent);
    }

    return val;
}

bool InstanceWrite::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroup);
            setGroup(refVal_setGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("solution"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("solution")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSolution;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSolution);
            setSolution(refVal_setSolution);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("persistent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("persistent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPersistent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPersistent);
            setPersistent(refVal_setPersistent);
        }
    }
    return ok;
}

void InstanceWrite::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group")), m_group));
    }
    if(m_solutionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("solution")), m_solution));
    }
    if(m_persistentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("persistent")), m_persistent));
    }
}

bool InstanceWrite::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group"))))
    {
        utility::string_t refVal_setGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group"))), refVal_setGroup );
        setGroup(refVal_setGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("solution"))))
    {
        utility::string_t refVal_setSolution;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("solution"))), refVal_setSolution );
        setSolution(refVal_setSolution);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("persistent"))))
    {
        bool refVal_setPersistent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("persistent"))), refVal_setPersistent );
        setPersistent(refVal_setPersistent);
    }
    return ok;
}

utility::string_t InstanceWrite::getName() const
{
    return m_name;
}

void InstanceWrite::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool InstanceWrite::nameIsSet() const
{
    return m_nameIsSet;
}

void InstanceWrite::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t InstanceWrite::getGroup() const
{
    return m_group;
}

void InstanceWrite::setGroup(const utility::string_t& value)
{
    m_group = value;
    m_groupIsSet = true;
}

bool InstanceWrite::groupIsSet() const
{
    return m_groupIsSet;
}

void InstanceWrite::unsetgroup()
{
    m_groupIsSet = false;
}
utility::string_t InstanceWrite::getSolution() const
{
    return m_solution;
}

void InstanceWrite::setSolution(const utility::string_t& value)
{
    m_solution = value;
    m_solutionIsSet = true;
}

bool InstanceWrite::solutionIsSet() const
{
    return m_solutionIsSet;
}

void InstanceWrite::unsetsolution()
{
    m_solutionIsSet = false;
}
bool InstanceWrite::isPersistent() const
{
    return m_persistent;
}

void InstanceWrite::setPersistent(bool value)
{
    m_persistent = value;
    m_persistentIsSet = true;
}

bool InstanceWrite::persistentIsSet() const
{
    return m_persistentIsSet;
}

void InstanceWrite::unsetpersistent()
{
    m_persistentIsSet = false;
}
}
}
}
}
}


