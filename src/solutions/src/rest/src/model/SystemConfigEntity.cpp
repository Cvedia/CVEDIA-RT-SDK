/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.2.3
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "rt_rest_client/model/SystemConfigEntity.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



SystemConfigEntity::SystemConfigEntity()
{
    m_fieldId = utility::conversions::to_string_t("");
    m_fieldIdIsSet = false;
    m_displayName = utility::conversions::to_string_t("");
    m_displayNameIsSet = false;
    m_type = utility::conversions::to_string_t("");
    m_typeIsSet = false;
    m_value = utility::conversions::to_string_t("");
    m_valueIsSet = false;
    m_group = utility::conversions::to_string_t("");
    m_groupIsSet = false;
    m_availableValuesIsSet = false;
}

SystemConfigEntity::~SystemConfigEntity()
{
}

void SystemConfigEntity::validate()
{
    // TODO: implement validation
}

web::json::value SystemConfigEntity::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_fieldIdIsSet)
    {
        val[utility::conversions::to_string_t(U("fieldId"))] = ModelBase::toJson(m_fieldId);
    }
    if(m_displayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_displayName);
    }
    if(m_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_type);
    }
    if(m_valueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_value);
    }
    if(m_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("group"))] = ModelBase::toJson(m_group);
    }
    if(m_availableValuesIsSet)
    {
        val[utility::conversions::to_string_t(U("availableValues"))] = ModelBase::toJson(m_availableValues);
    }

    return val;
}

bool SystemConfigEntity::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fieldId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fieldId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFieldId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFieldId);
            setFieldId(refVal_setFieldId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroup);
            setGroup(refVal_setGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availableValues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availableValues")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DisplayableEntity>> refVal_setAvailableValues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvailableValues);
            setAvailableValues(refVal_setAvailableValues);
        }
    }
    return ok;
}

void SystemConfigEntity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_fieldIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fieldId")), m_fieldId));
    }
    if(m_displayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_displayName));
    }
    if(m_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_type));
    }
    if(m_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_value));
    }
    if(m_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group")), m_group));
    }
    if(m_availableValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availableValues")), m_availableValues));
    }
}

bool SystemConfigEntity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fieldId"))))
    {
        utility::string_t refVal_setFieldId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fieldId"))), refVal_setFieldId );
        setFieldId(refVal_setFieldId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group"))))
    {
        utility::string_t refVal_setGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group"))), refVal_setGroup );
        setGroup(refVal_setGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availableValues"))))
    {
        std::vector<std::shared_ptr<DisplayableEntity>> refVal_setAvailableValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availableValues"))), refVal_setAvailableValues );
        setAvailableValues(refVal_setAvailableValues);
    }
    return ok;
}

utility::string_t SystemConfigEntity::getFieldId() const
{
    return m_fieldId;
}

void SystemConfigEntity::setFieldId(const utility::string_t& value)
{
    m_fieldId = value;
    m_fieldIdIsSet = true;
}

bool SystemConfigEntity::fieldIdIsSet() const
{
    return m_fieldIdIsSet;
}

void SystemConfigEntity::unsetfieldId()
{
    m_fieldIdIsSet = false;
}
utility::string_t SystemConfigEntity::getDisplayName() const
{
    return m_displayName;
}

void SystemConfigEntity::setDisplayName(const utility::string_t& value)
{
    m_displayName = value;
    m_displayNameIsSet = true;
}

bool SystemConfigEntity::displayNameIsSet() const
{
    return m_displayNameIsSet;
}

void SystemConfigEntity::unsetdisplayName()
{
    m_displayNameIsSet = false;
}
utility::string_t SystemConfigEntity::getType() const
{
    return m_type;
}

void SystemConfigEntity::setType(const utility::string_t& value)
{
    m_type = value;
    m_typeIsSet = true;
}

bool SystemConfigEntity::typeIsSet() const
{
    return m_typeIsSet;
}

void SystemConfigEntity::unsettype()
{
    m_typeIsSet = false;
}
utility::string_t SystemConfigEntity::getValue() const
{
    return m_value;
}

void SystemConfigEntity::setValue(const utility::string_t& value)
{
    m_value = value;
    m_valueIsSet = true;
}

bool SystemConfigEntity::valueIsSet() const
{
    return m_valueIsSet;
}

void SystemConfigEntity::unsetvalue()
{
    m_valueIsSet = false;
}
utility::string_t SystemConfigEntity::getGroup() const
{
    return m_group;
}

void SystemConfigEntity::setGroup(const utility::string_t& value)
{
    m_group = value;
    m_groupIsSet = true;
}

bool SystemConfigEntity::groupIsSet() const
{
    return m_groupIsSet;
}

void SystemConfigEntity::unsetgroup()
{
    m_groupIsSet = false;
}
std::vector<std::shared_ptr<DisplayableEntity>>& SystemConfigEntity::getAvailableValues()
{
    return m_availableValues;
}

void SystemConfigEntity::setAvailableValues(const std::vector<std::shared_ptr<DisplayableEntity>>& value)
{
    m_availableValues = value;
    m_availableValuesIsSet = true;
}

bool SystemConfigEntity::availableValuesIsSet() const
{
    return m_availableValuesIsSet;
}

void SystemConfigEntity::unsetavailableValues()
{
    m_availableValuesIsSet = false;
}
}
}
}
}
}


