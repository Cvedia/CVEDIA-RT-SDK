/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.2.2
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "rt_rest_client/model/CoreGetSolutionsV1_200_response_solutions.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



CoreGetSolutionsV1_200_response_solutions::CoreGetSolutionsV1_200_response_solutions()
{
    m_id = utility::conversions::to_string_t("");
    m_idIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_version = utility::conversions::to_string_t("");
    m_versionIsSet = false;
}

CoreGetSolutionsV1_200_response_solutions::~CoreGetSolutionsV1_200_response_solutions()
{
}

void CoreGetSolutionsV1_200_response_solutions::validate()
{
    // TODO: implement validation
}

web::json::value CoreGetSolutionsV1_200_response_solutions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_idIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_id);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_version);
    }

    return val;
}

bool CoreGetSolutionsV1_200_response_solutions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    return ok;
}

void CoreGetSolutionsV1_200_response_solutions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_id));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_version));
    }
}

bool CoreGetSolutionsV1_200_response_solutions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    return ok;
}

utility::string_t CoreGetSolutionsV1_200_response_solutions::getId() const
{
    return m_id;
}

void CoreGetSolutionsV1_200_response_solutions::setId(const utility::string_t& value)
{
    m_id = value;
    m_idIsSet = true;
}

bool CoreGetSolutionsV1_200_response_solutions::idIsSet() const
{
    return m_idIsSet;
}

void CoreGetSolutionsV1_200_response_solutions::unsetid()
{
    m_idIsSet = false;
}
utility::string_t CoreGetSolutionsV1_200_response_solutions::getName() const
{
    return m_name;
}

void CoreGetSolutionsV1_200_response_solutions::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool CoreGetSolutionsV1_200_response_solutions::nameIsSet() const
{
    return m_nameIsSet;
}

void CoreGetSolutionsV1_200_response_solutions::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t CoreGetSolutionsV1_200_response_solutions::getVersion() const
{
    return m_version;
}

void CoreGetSolutionsV1_200_response_solutions::setVersion(const utility::string_t& value)
{
    m_version = value;
    m_versionIsSet = true;
}

bool CoreGetSolutionsV1_200_response_solutions::versionIsSet() const
{
    return m_versionIsSet;
}

void CoreGetSolutionsV1_200_response_solutions::unsetversion()
{
    m_versionIsSet = false;
}
}
}
}
}
}


