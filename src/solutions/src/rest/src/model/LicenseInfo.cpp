/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "rt_rest_client/model/LicenseInfo.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



LicenseInfo::LicenseInfo()
{
    m_licenseKey = utility::conversions::to_string_t("");
    m_licenseKeyIsSet = false;
    m_expiryDate = utility::conversions::to_string_t("");
    m_expiryDateIsSet = false;
    m_maxMachines = 0;
    m_maxMachinesIsSet = false;
    m_maxStreams = 0;
    m_maxStreamsIsSet = false;
}

LicenseInfo::~LicenseInfo()
{
}

void LicenseInfo::validate()
{
    // TODO: implement validation
}

web::json::value LicenseInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_licenseKeyIsSet)
    {
        val[utility::conversions::to_string_t(U("licenseKey"))] = ModelBase::toJson(m_licenseKey);
    }
    if(m_expiryDateIsSet)
    {
        val[utility::conversions::to_string_t(U("expiryDate"))] = ModelBase::toJson(m_expiryDate);
    }
    if(m_maxMachinesIsSet)
    {
        val[utility::conversions::to_string_t(U("maxMachines"))] = ModelBase::toJson(m_maxMachines);
    }
    if(m_maxStreamsIsSet)
    {
        val[utility::conversions::to_string_t(U("maxStreams"))] = ModelBase::toJson(m_maxStreams);
    }

    return val;
}

bool LicenseInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("licenseKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenseKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseKey);
            setLicenseKey(refVal_setLicenseKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiryDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiryDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExpiryDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiryDate);
            setExpiryDate(refVal_setExpiryDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxMachines"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxMachines")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxMachines;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxMachines);
            setMaxMachines(refVal_setMaxMachines);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxStreams"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxStreams")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxStreams;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxStreams);
            setMaxStreams(refVal_setMaxStreams);
        }
    }
    return ok;
}

void LicenseInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_licenseKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenseKey")), m_licenseKey));
    }
    if(m_expiryDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiryDate")), m_expiryDate));
    }
    if(m_maxMachinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxMachines")), m_maxMachines));
    }
    if(m_maxStreamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxStreams")), m_maxStreams));
    }
}

bool LicenseInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("licenseKey"))))
    {
        utility::string_t refVal_setLicenseKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenseKey"))), refVal_setLicenseKey );
        setLicenseKey(refVal_setLicenseKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiryDate"))))
    {
        utility::string_t refVal_setExpiryDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiryDate"))), refVal_setExpiryDate );
        setExpiryDate(refVal_setExpiryDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxMachines"))))
    {
        int32_t refVal_setMaxMachines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxMachines"))), refVal_setMaxMachines );
        setMaxMachines(refVal_setMaxMachines);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxStreams"))))
    {
        int32_t refVal_setMaxStreams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxStreams"))), refVal_setMaxStreams );
        setMaxStreams(refVal_setMaxStreams);
    }
    return ok;
}

utility::string_t LicenseInfo::getLicenseKey() const
{
    return m_licenseKey;
}

void LicenseInfo::setLicenseKey(const utility::string_t& value)
{
    m_licenseKey = value;
    m_licenseKeyIsSet = true;
}

bool LicenseInfo::licenseKeyIsSet() const
{
    return m_licenseKeyIsSet;
}

void LicenseInfo::unsetlicenseKey()
{
    m_licenseKeyIsSet = false;
}
utility::string_t LicenseInfo::getExpiryDate() const
{
    return m_expiryDate;
}

void LicenseInfo::setExpiryDate(const utility::string_t& value)
{
    m_expiryDate = value;
    m_expiryDateIsSet = true;
}

bool LicenseInfo::expiryDateIsSet() const
{
    return m_expiryDateIsSet;
}

void LicenseInfo::unsetexpiryDate()
{
    m_expiryDateIsSet = false;
}
int32_t LicenseInfo::getMaxMachines() const
{
    return m_maxMachines;
}

void LicenseInfo::setMaxMachines(int32_t value)
{
    m_maxMachines = value;
    m_maxMachinesIsSet = true;
}

bool LicenseInfo::maxMachinesIsSet() const
{
    return m_maxMachinesIsSet;
}

void LicenseInfo::unsetmaxMachines()
{
    m_maxMachinesIsSet = false;
}
int32_t LicenseInfo::getMaxStreams() const
{
    return m_maxStreams;
}

void LicenseInfo::setMaxStreams(int32_t value)
{
    m_maxStreams = value;
    m_maxStreamsIsSet = true;
}

bool LicenseInfo::maxStreamsIsSet() const
{
    return m_maxStreamsIsSet;
}

void LicenseInfo::unsetmaxStreams()
{
    m_maxStreamsIsSet = false;
}
}
}
}
}
}


