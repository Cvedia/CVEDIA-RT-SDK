/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "rt_rest_client/model/InstanceRead.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



InstanceRead::InstanceRead()
{
    m_instanceId = utility::conversions::to_string_t("");
    m_instanceIdIsSet = false;
    m_displayName = utility::conversions::to_string_t("");
    m_displayNameIsSet = false;
    m_group = utility::conversions::to_string_t("");
    m_groupIsSet = false;
    m_solutionId = utility::conversions::to_string_t("");
    m_solutionIdIsSet = false;
    m_solutionName = utility::conversions::to_string_t("");
    m_solutionNameIsSet = false;
    m_persistent = false;
    m_persistentIsSet = false;
    m_loaded = false;
    m_loadedIsSet = false;
    m_running = false;
    m_runningIsSet = false;
    m_fps = utility::conversions::to_string_t("");
    m_fpsIsSet = false;
}

InstanceRead::~InstanceRead()
{
}

void InstanceRead::validate()
{
    // TODO: implement validation
}

web::json::value InstanceRead::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_instanceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("instanceId"))] = ModelBase::toJson(m_instanceId);
    }
    if(m_displayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_displayName);
    }
    if(m_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("group"))] = ModelBase::toJson(m_group);
    }
    if(m_solutionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("solutionId"))] = ModelBase::toJson(m_solutionId);
    }
    if(m_solutionNameIsSet)
    {
        val[utility::conversions::to_string_t(U("solutionName"))] = ModelBase::toJson(m_solutionName);
    }
    if(m_persistentIsSet)
    {
        val[utility::conversions::to_string_t(U("persistent"))] = ModelBase::toJson(m_persistent);
    }
    if(m_loadedIsSet)
    {
        val[utility::conversions::to_string_t(U("loaded"))] = ModelBase::toJson(m_loaded);
    }
    if(m_runningIsSet)
    {
        val[utility::conversions::to_string_t(U("running"))] = ModelBase::toJson(m_running);
    }
    if(m_fpsIsSet)
    {
        val[utility::conversions::to_string_t(U("fps"))] = ModelBase::toJson(m_fps);
    }

    return val;
}

bool InstanceRead::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("instanceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instanceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstanceId);
            setInstanceId(refVal_setInstanceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroup);
            setGroup(refVal_setGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("solutionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("solutionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSolutionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSolutionId);
            setSolutionId(refVal_setSolutionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("solutionName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("solutionName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSolutionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSolutionName);
            setSolutionName(refVal_setSolutionName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("persistent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("persistent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPersistent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPersistent);
            setPersistent(refVal_setPersistent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("loaded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("loaded")));
        if(!fieldValue.is_null())
        {
            bool refVal_setLoaded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLoaded);
            setLoaded(refVal_setLoaded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("running"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("running")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRunning;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRunning);
            setRunning(refVal_setRunning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fps")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFps);
            setFps(refVal_setFps);
        }
    }
    return ok;
}

void InstanceRead::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_instanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instanceId")), m_instanceId));
    }
    if(m_displayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_displayName));
    }
    if(m_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group")), m_group));
    }
    if(m_solutionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("solutionId")), m_solutionId));
    }
    if(m_solutionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("solutionName")), m_solutionName));
    }
    if(m_persistentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("persistent")), m_persistent));
    }
    if(m_loadedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("loaded")), m_loaded));
    }
    if(m_runningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("running")), m_running));
    }
    if(m_fpsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fps")), m_fps));
    }
}

bool InstanceRead::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("instanceId"))))
    {
        utility::string_t refVal_setInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instanceId"))), refVal_setInstanceId );
        setInstanceId(refVal_setInstanceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group"))))
    {
        utility::string_t refVal_setGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group"))), refVal_setGroup );
        setGroup(refVal_setGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("solutionId"))))
    {
        utility::string_t refVal_setSolutionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("solutionId"))), refVal_setSolutionId );
        setSolutionId(refVal_setSolutionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("solutionName"))))
    {
        utility::string_t refVal_setSolutionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("solutionName"))), refVal_setSolutionName );
        setSolutionName(refVal_setSolutionName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("persistent"))))
    {
        bool refVal_setPersistent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("persistent"))), refVal_setPersistent );
        setPersistent(refVal_setPersistent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("loaded"))))
    {
        bool refVal_setLoaded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("loaded"))), refVal_setLoaded );
        setLoaded(refVal_setLoaded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("running"))))
    {
        bool refVal_setRunning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("running"))), refVal_setRunning );
        setRunning(refVal_setRunning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fps"))))
    {
        utility::string_t refVal_setFps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fps"))), refVal_setFps );
        setFps(refVal_setFps);
    }
    return ok;
}

utility::string_t InstanceRead::getInstanceId() const
{
    return m_instanceId;
}

void InstanceRead::setInstanceId(const utility::string_t& value)
{
    m_instanceId = value;
    m_instanceIdIsSet = true;
}

bool InstanceRead::instanceIdIsSet() const
{
    return m_instanceIdIsSet;
}

void InstanceRead::unsetinstanceId()
{
    m_instanceIdIsSet = false;
}
utility::string_t InstanceRead::getDisplayName() const
{
    return m_displayName;
}

void InstanceRead::setDisplayName(const utility::string_t& value)
{
    m_displayName = value;
    m_displayNameIsSet = true;
}

bool InstanceRead::displayNameIsSet() const
{
    return m_displayNameIsSet;
}

void InstanceRead::unsetdisplayName()
{
    m_displayNameIsSet = false;
}
utility::string_t InstanceRead::getGroup() const
{
    return m_group;
}

void InstanceRead::setGroup(const utility::string_t& value)
{
    m_group = value;
    m_groupIsSet = true;
}

bool InstanceRead::groupIsSet() const
{
    return m_groupIsSet;
}

void InstanceRead::unsetgroup()
{
    m_groupIsSet = false;
}
utility::string_t InstanceRead::getSolutionId() const
{
    return m_solutionId;
}

void InstanceRead::setSolutionId(const utility::string_t& value)
{
    m_solutionId = value;
    m_solutionIdIsSet = true;
}

bool InstanceRead::solutionIdIsSet() const
{
    return m_solutionIdIsSet;
}

void InstanceRead::unsetsolutionId()
{
    m_solutionIdIsSet = false;
}
utility::string_t InstanceRead::getSolutionName() const
{
    return m_solutionName;
}

void InstanceRead::setSolutionName(const utility::string_t& value)
{
    m_solutionName = value;
    m_solutionNameIsSet = true;
}

bool InstanceRead::solutionNameIsSet() const
{
    return m_solutionNameIsSet;
}

void InstanceRead::unsetsolutionName()
{
    m_solutionNameIsSet = false;
}
bool InstanceRead::isPersistent() const
{
    return m_persistent;
}

void InstanceRead::setPersistent(bool value)
{
    m_persistent = value;
    m_persistentIsSet = true;
}

bool InstanceRead::persistentIsSet() const
{
    return m_persistentIsSet;
}

void InstanceRead::unsetpersistent()
{
    m_persistentIsSet = false;
}
bool InstanceRead::isLoaded() const
{
    return m_loaded;
}

void InstanceRead::setLoaded(bool value)
{
    m_loaded = value;
    m_loadedIsSet = true;
}

bool InstanceRead::loadedIsSet() const
{
    return m_loadedIsSet;
}

void InstanceRead::unsetloaded()
{
    m_loadedIsSet = false;
}
bool InstanceRead::isRunning() const
{
    return m_running;
}

void InstanceRead::setRunning(bool value)
{
    m_running = value;
    m_runningIsSet = true;
}

bool InstanceRead::runningIsSet() const
{
    return m_runningIsSet;
}

void InstanceRead::unsetrunning()
{
    m_runningIsSet = false;
}
utility::string_t InstanceRead::getFps() const
{
    return m_fps;
}

void InstanceRead::setFps(const utility::string_t& value)
{
    m_fps = value;
    m_fpsIsSet = true;
}

bool InstanceRead::fpsIsSet() const
{
    return m_fpsIsSet;
}

void InstanceRead::unsetfps()
{
    m_fpsIsSet = false;
}
}
}
}
}
}


