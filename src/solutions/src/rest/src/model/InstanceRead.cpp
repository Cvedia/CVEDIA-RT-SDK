/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.2.3
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "rt_rest_client/model/InstanceRead.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



InstanceRead::InstanceRead()
{
    m_instanceId = utility::conversions::to_string_t("");
    m_instanceIdIsSet = false;
    m_displayName = utility::conversions::to_string_t("");
    m_displayNameIsSet = false;
    m_group = utility::conversions::to_string_t("");
    m_groupIsSet = false;
    m_solutionId = utility::conversions::to_string_t("");
    m_solutionIdIsSet = false;
    m_solutionName = utility::conversions::to_string_t("");
    m_solutionNameIsSet = false;
    m_persistent = false;
    m_persistentIsSet = false;
    m_loaded = false;
    m_loadedIsSet = false;
    m_running = false;
    m_runningIsSet = false;
    m_fps = 0.0f;
    m_fpsIsSet = false;
    m_version = utility::conversions::to_string_t("");
    m_versionIsSet = false;
    m_frameRateLimit = 0.0;
    m_frameRateLimitIsSet = false;
    m_metadataMode = false;
    m_metadataModeIsSet = false;
    m_statisticsMode = false;
    m_statisticsModeIsSet = false;
    m_diagnosticsMode = false;
    m_diagnosticsModeIsSet = false;
    m_debugMode = false;
    m_debugModeIsSet = false;
    m_readOnly = false;
    m_readOnlyIsSet = false;
    m_autoStart = false;
    m_autoStartIsSet = false;
    m_autoRestart = false;
    m_autoRestartIsSet = false;
    m_systemInstance = false;
    m_systemInstanceIsSet = false;
    m_detectorModeIsSet = false;
    m_detectionSensitivityIsSet = false;
    m_movementSensitivityIsSet = false;
    m_sensorModalityIsSet = false;
}

InstanceRead::~InstanceRead()
{
}

void InstanceRead::validate()
{
    // TODO: implement validation
}

web::json::value InstanceRead::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_instanceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("instanceId"))] = ModelBase::toJson(m_instanceId);
    }
    if(m_displayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_displayName);
    }
    if(m_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("group"))] = ModelBase::toJson(m_group);
    }
    if(m_solutionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("solutionId"))] = ModelBase::toJson(m_solutionId);
    }
    if(m_solutionNameIsSet)
    {
        val[utility::conversions::to_string_t(U("solutionName"))] = ModelBase::toJson(m_solutionName);
    }
    if(m_persistentIsSet)
    {
        val[utility::conversions::to_string_t(U("persistent"))] = ModelBase::toJson(m_persistent);
    }
    if(m_loadedIsSet)
    {
        val[utility::conversions::to_string_t(U("loaded"))] = ModelBase::toJson(m_loaded);
    }
    if(m_runningIsSet)
    {
        val[utility::conversions::to_string_t(U("running"))] = ModelBase::toJson(m_running);
    }
    if(m_fpsIsSet)
    {
        val[utility::conversions::to_string_t(U("fps"))] = ModelBase::toJson(m_fps);
    }
    if(m_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_version);
    }
    if(m_frameRateLimitIsSet)
    {
        val[utility::conversions::to_string_t(U("frameRateLimit"))] = ModelBase::toJson(m_frameRateLimit);
    }
    if(m_metadataModeIsSet)
    {
        val[utility::conversions::to_string_t(U("metadataMode"))] = ModelBase::toJson(m_metadataMode);
    }
    if(m_statisticsModeIsSet)
    {
        val[utility::conversions::to_string_t(U("statisticsMode"))] = ModelBase::toJson(m_statisticsMode);
    }
    if(m_diagnosticsModeIsSet)
    {
        val[utility::conversions::to_string_t(U("diagnosticsMode"))] = ModelBase::toJson(m_diagnosticsMode);
    }
    if(m_debugModeIsSet)
    {
        val[utility::conversions::to_string_t(U("debugMode"))] = ModelBase::toJson(m_debugMode);
    }
    if(m_readOnlyIsSet)
    {
        val[utility::conversions::to_string_t(U("readOnly"))] = ModelBase::toJson(m_readOnly);
    }
    if(m_autoStartIsSet)
    {
        val[utility::conversions::to_string_t(U("autoStart"))] = ModelBase::toJson(m_autoStart);
    }
    if(m_autoRestartIsSet)
    {
        val[utility::conversions::to_string_t(U("autoRestart"))] = ModelBase::toJson(m_autoRestart);
    }
    if(m_systemInstanceIsSet)
    {
        val[utility::conversions::to_string_t(U("systemInstance"))] = ModelBase::toJson(m_systemInstance);
    }
    if(m_detectorModeIsSet)
    {
        val[utility::conversions::to_string_t(U("detectorMode"))] = ModelBase::toJson(m_detectorMode);
    }
    if(m_detectionSensitivityIsSet)
    {
        val[utility::conversions::to_string_t(U("detectionSensitivity"))] = ModelBase::toJson(m_detectionSensitivity);
    }
    if(m_movementSensitivityIsSet)
    {
        val[utility::conversions::to_string_t(U("movementSensitivity"))] = ModelBase::toJson(m_movementSensitivity);
    }
    if(m_sensorModalityIsSet)
    {
        val[utility::conversions::to_string_t(U("sensorModality"))] = ModelBase::toJson(m_sensorModality);
    }

    return val;
}

bool InstanceRead::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("instanceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instanceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstanceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstanceId);
            setInstanceId(refVal_setInstanceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroup);
            setGroup(refVal_setGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("solutionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("solutionId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSolutionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSolutionId);
            setSolutionId(refVal_setSolutionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("solutionName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("solutionName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSolutionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSolutionName);
            setSolutionName(refVal_setSolutionName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("persistent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("persistent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPersistent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPersistent);
            setPersistent(refVal_setPersistent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("loaded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("loaded")));
        if(!fieldValue.is_null())
        {
            bool refVal_setLoaded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLoaded);
            setLoaded(refVal_setLoaded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("running"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("running")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRunning;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRunning);
            setRunning(refVal_setRunning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fps")));
        if(!fieldValue.is_null())
        {
            float refVal_setFps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFps);
            setFps(refVal_setFps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frameRateLimit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frameRateLimit")));
        if(!fieldValue.is_null())
        {
            double refVal_setFrameRateLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrameRateLimit);
            setFrameRateLimit(refVal_setFrameRateLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metadataMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metadataMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setMetadataMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadataMode);
            setMetadataMode(refVal_setMetadataMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statisticsMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statisticsMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStatisticsMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatisticsMode);
            setStatisticsMode(refVal_setStatisticsMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("diagnosticsMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("diagnosticsMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDiagnosticsMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiagnosticsMode);
            setDiagnosticsMode(refVal_setDiagnosticsMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("debugMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("debugMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDebugMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDebugMode);
            setDebugMode(refVal_setDebugMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("readOnly"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("readOnly")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReadOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReadOnly);
            setReadOnly(refVal_setReadOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("autoStart"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("autoStart")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAutoStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutoStart);
            setAutoStart(refVal_setAutoStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("autoRestart"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("autoRestart")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAutoRestart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutoRestart);
            setAutoRestart(refVal_setAutoRestart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systemInstance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemInstance")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSystemInstance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystemInstance);
            setSystemInstance(refVal_setSystemInstance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("detectorMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("detectorMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DetectorMode> refVal_setDetectorMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetectorMode);
            setDetectorMode(refVal_setDetectorMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("detectionSensitivity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("detectionSensitivity")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Sensitivity> refVal_setDetectionSensitivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetectionSensitivity);
            setDetectionSensitivity(refVal_setDetectionSensitivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("movementSensitivity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("movementSensitivity")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Sensitivity> refVal_setMovementSensitivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMovementSensitivity);
            setMovementSensitivity(refVal_setMovementSensitivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sensorModality"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sensorModality")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SensorModality> refVal_setSensorModality;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSensorModality);
            setSensorModality(refVal_setSensorModality);
        }
    }
    return ok;
}

void InstanceRead::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_instanceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instanceId")), m_instanceId));
    }
    if(m_displayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_displayName));
    }
    if(m_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group")), m_group));
    }
    if(m_solutionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("solutionId")), m_solutionId));
    }
    if(m_solutionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("solutionName")), m_solutionName));
    }
    if(m_persistentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("persistent")), m_persistent));
    }
    if(m_loadedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("loaded")), m_loaded));
    }
    if(m_runningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("running")), m_running));
    }
    if(m_fpsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fps")), m_fps));
    }
    if(m_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_version));
    }
    if(m_frameRateLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frameRateLimit")), m_frameRateLimit));
    }
    if(m_metadataModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metadataMode")), m_metadataMode));
    }
    if(m_statisticsModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statisticsMode")), m_statisticsMode));
    }
    if(m_diagnosticsModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("diagnosticsMode")), m_diagnosticsMode));
    }
    if(m_debugModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("debugMode")), m_debugMode));
    }
    if(m_readOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("readOnly")), m_readOnly));
    }
    if(m_autoStartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("autoStart")), m_autoStart));
    }
    if(m_autoRestartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("autoRestart")), m_autoRestart));
    }
    if(m_systemInstanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemInstance")), m_systemInstance));
    }
    if(m_detectorModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("detectorMode")), m_detectorMode));
    }
    if(m_detectionSensitivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("detectionSensitivity")), m_detectionSensitivity));
    }
    if(m_movementSensitivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("movementSensitivity")), m_movementSensitivity));
    }
    if(m_sensorModalityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sensorModality")), m_sensorModality));
    }
}

bool InstanceRead::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("instanceId"))))
    {
        utility::string_t refVal_setInstanceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instanceId"))), refVal_setInstanceId );
        setInstanceId(refVal_setInstanceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group"))))
    {
        utility::string_t refVal_setGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group"))), refVal_setGroup );
        setGroup(refVal_setGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("solutionId"))))
    {
        utility::string_t refVal_setSolutionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("solutionId"))), refVal_setSolutionId );
        setSolutionId(refVal_setSolutionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("solutionName"))))
    {
        utility::string_t refVal_setSolutionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("solutionName"))), refVal_setSolutionName );
        setSolutionName(refVal_setSolutionName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("persistent"))))
    {
        bool refVal_setPersistent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("persistent"))), refVal_setPersistent );
        setPersistent(refVal_setPersistent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("loaded"))))
    {
        bool refVal_setLoaded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("loaded"))), refVal_setLoaded );
        setLoaded(refVal_setLoaded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("running"))))
    {
        bool refVal_setRunning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("running"))), refVal_setRunning );
        setRunning(refVal_setRunning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fps"))))
    {
        float refVal_setFps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fps"))), refVal_setFps );
        setFps(refVal_setFps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frameRateLimit"))))
    {
        double refVal_setFrameRateLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frameRateLimit"))), refVal_setFrameRateLimit );
        setFrameRateLimit(refVal_setFrameRateLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metadataMode"))))
    {
        bool refVal_setMetadataMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metadataMode"))), refVal_setMetadataMode );
        setMetadataMode(refVal_setMetadataMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statisticsMode"))))
    {
        bool refVal_setStatisticsMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statisticsMode"))), refVal_setStatisticsMode );
        setStatisticsMode(refVal_setStatisticsMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("diagnosticsMode"))))
    {
        bool refVal_setDiagnosticsMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("diagnosticsMode"))), refVal_setDiagnosticsMode );
        setDiagnosticsMode(refVal_setDiagnosticsMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("debugMode"))))
    {
        bool refVal_setDebugMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("debugMode"))), refVal_setDebugMode );
        setDebugMode(refVal_setDebugMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("readOnly"))))
    {
        bool refVal_setReadOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("readOnly"))), refVal_setReadOnly );
        setReadOnly(refVal_setReadOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("autoStart"))))
    {
        bool refVal_setAutoStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("autoStart"))), refVal_setAutoStart );
        setAutoStart(refVal_setAutoStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("autoRestart"))))
    {
        bool refVal_setAutoRestart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("autoRestart"))), refVal_setAutoRestart );
        setAutoRestart(refVal_setAutoRestart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systemInstance"))))
    {
        bool refVal_setSystemInstance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemInstance"))), refVal_setSystemInstance );
        setSystemInstance(refVal_setSystemInstance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("detectorMode"))))
    {
        std::shared_ptr<DetectorMode> refVal_setDetectorMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("detectorMode"))), refVal_setDetectorMode );
        setDetectorMode(refVal_setDetectorMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("detectionSensitivity"))))
    {
        std::shared_ptr<Sensitivity> refVal_setDetectionSensitivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("detectionSensitivity"))), refVal_setDetectionSensitivity );
        setDetectionSensitivity(refVal_setDetectionSensitivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("movementSensitivity"))))
    {
        std::shared_ptr<Sensitivity> refVal_setMovementSensitivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("movementSensitivity"))), refVal_setMovementSensitivity );
        setMovementSensitivity(refVal_setMovementSensitivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sensorModality"))))
    {
        std::shared_ptr<SensorModality> refVal_setSensorModality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sensorModality"))), refVal_setSensorModality );
        setSensorModality(refVal_setSensorModality);
    }
    return ok;
}

utility::string_t InstanceRead::getInstanceId() const
{
    return m_instanceId;
}

void InstanceRead::setInstanceId(const utility::string_t& value)
{
    m_instanceId = value;
    m_instanceIdIsSet = true;
}

bool InstanceRead::instanceIdIsSet() const
{
    return m_instanceIdIsSet;
}

void InstanceRead::unsetinstanceId()
{
    m_instanceIdIsSet = false;
}
utility::string_t InstanceRead::getDisplayName() const
{
    return m_displayName;
}

void InstanceRead::setDisplayName(const utility::string_t& value)
{
    m_displayName = value;
    m_displayNameIsSet = true;
}

bool InstanceRead::displayNameIsSet() const
{
    return m_displayNameIsSet;
}

void InstanceRead::unsetdisplayName()
{
    m_displayNameIsSet = false;
}
utility::string_t InstanceRead::getGroup() const
{
    return m_group;
}

void InstanceRead::setGroup(const utility::string_t& value)
{
    m_group = value;
    m_groupIsSet = true;
}

bool InstanceRead::groupIsSet() const
{
    return m_groupIsSet;
}

void InstanceRead::unsetgroup()
{
    m_groupIsSet = false;
}
utility::string_t InstanceRead::getSolutionId() const
{
    return m_solutionId;
}

void InstanceRead::setSolutionId(const utility::string_t& value)
{
    m_solutionId = value;
    m_solutionIdIsSet = true;
}

bool InstanceRead::solutionIdIsSet() const
{
    return m_solutionIdIsSet;
}

void InstanceRead::unsetsolutionId()
{
    m_solutionIdIsSet = false;
}
utility::string_t InstanceRead::getSolutionName() const
{
    return m_solutionName;
}

void InstanceRead::setSolutionName(const utility::string_t& value)
{
    m_solutionName = value;
    m_solutionNameIsSet = true;
}

bool InstanceRead::solutionNameIsSet() const
{
    return m_solutionNameIsSet;
}

void InstanceRead::unsetsolutionName()
{
    m_solutionNameIsSet = false;
}
bool InstanceRead::isPersistent() const
{
    return m_persistent;
}

void InstanceRead::setPersistent(bool value)
{
    m_persistent = value;
    m_persistentIsSet = true;
}

bool InstanceRead::persistentIsSet() const
{
    return m_persistentIsSet;
}

void InstanceRead::unsetpersistent()
{
    m_persistentIsSet = false;
}
bool InstanceRead::isLoaded() const
{
    return m_loaded;
}

void InstanceRead::setLoaded(bool value)
{
    m_loaded = value;
    m_loadedIsSet = true;
}

bool InstanceRead::loadedIsSet() const
{
    return m_loadedIsSet;
}

void InstanceRead::unsetloaded()
{
    m_loadedIsSet = false;
}
bool InstanceRead::isRunning() const
{
    return m_running;
}

void InstanceRead::setRunning(bool value)
{
    m_running = value;
    m_runningIsSet = true;
}

bool InstanceRead::runningIsSet() const
{
    return m_runningIsSet;
}

void InstanceRead::unsetrunning()
{
    m_runningIsSet = false;
}
float InstanceRead::getFps() const
{
    return m_fps;
}

void InstanceRead::setFps(float value)
{
    m_fps = value;
    m_fpsIsSet = true;
}

bool InstanceRead::fpsIsSet() const
{
    return m_fpsIsSet;
}

void InstanceRead::unsetfps()
{
    m_fpsIsSet = false;
}
utility::string_t InstanceRead::getVersion() const
{
    return m_version;
}

void InstanceRead::setVersion(const utility::string_t& value)
{
    m_version = value;
    m_versionIsSet = true;
}

bool InstanceRead::versionIsSet() const
{
    return m_versionIsSet;
}

void InstanceRead::unsetversion()
{
    m_versionIsSet = false;
}
double InstanceRead::getFrameRateLimit() const
{
    return m_frameRateLimit;
}

void InstanceRead::setFrameRateLimit(double value)
{
    m_frameRateLimit = value;
    m_frameRateLimitIsSet = true;
}

bool InstanceRead::frameRateLimitIsSet() const
{
    return m_frameRateLimitIsSet;
}

void InstanceRead::unsetframeRateLimit()
{
    m_frameRateLimitIsSet = false;
}
bool InstanceRead::isMetadataMode() const
{
    return m_metadataMode;
}

void InstanceRead::setMetadataMode(bool value)
{
    m_metadataMode = value;
    m_metadataModeIsSet = true;
}

bool InstanceRead::metadataModeIsSet() const
{
    return m_metadataModeIsSet;
}

void InstanceRead::unsetmetadataMode()
{
    m_metadataModeIsSet = false;
}
bool InstanceRead::isStatisticsMode() const
{
    return m_statisticsMode;
}

void InstanceRead::setStatisticsMode(bool value)
{
    m_statisticsMode = value;
    m_statisticsModeIsSet = true;
}

bool InstanceRead::statisticsModeIsSet() const
{
    return m_statisticsModeIsSet;
}

void InstanceRead::unsetstatisticsMode()
{
    m_statisticsModeIsSet = false;
}
bool InstanceRead::isDiagnosticsMode() const
{
    return m_diagnosticsMode;
}

void InstanceRead::setDiagnosticsMode(bool value)
{
    m_diagnosticsMode = value;
    m_diagnosticsModeIsSet = true;
}

bool InstanceRead::diagnosticsModeIsSet() const
{
    return m_diagnosticsModeIsSet;
}

void InstanceRead::unsetdiagnosticsMode()
{
    m_diagnosticsModeIsSet = false;
}
bool InstanceRead::isDebugMode() const
{
    return m_debugMode;
}

void InstanceRead::setDebugMode(bool value)
{
    m_debugMode = value;
    m_debugModeIsSet = true;
}

bool InstanceRead::debugModeIsSet() const
{
    return m_debugModeIsSet;
}

void InstanceRead::unsetdebugMode()
{
    m_debugModeIsSet = false;
}
bool InstanceRead::isReadOnly() const
{
    return m_readOnly;
}

void InstanceRead::setReadOnly(bool value)
{
    m_readOnly = value;
    m_readOnlyIsSet = true;
}

bool InstanceRead::readOnlyIsSet() const
{
    return m_readOnlyIsSet;
}

void InstanceRead::unsetreadOnly()
{
    m_readOnlyIsSet = false;
}
bool InstanceRead::isAutoStart() const
{
    return m_autoStart;
}

void InstanceRead::setAutoStart(bool value)
{
    m_autoStart = value;
    m_autoStartIsSet = true;
}

bool InstanceRead::autoStartIsSet() const
{
    return m_autoStartIsSet;
}

void InstanceRead::unsetautoStart()
{
    m_autoStartIsSet = false;
}
bool InstanceRead::isAutoRestart() const
{
    return m_autoRestart;
}

void InstanceRead::setAutoRestart(bool value)
{
    m_autoRestart = value;
    m_autoRestartIsSet = true;
}

bool InstanceRead::autoRestartIsSet() const
{
    return m_autoRestartIsSet;
}

void InstanceRead::unsetautoRestart()
{
    m_autoRestartIsSet = false;
}
bool InstanceRead::isSystemInstance() const
{
    return m_systemInstance;
}

void InstanceRead::setSystemInstance(bool value)
{
    m_systemInstance = value;
    m_systemInstanceIsSet = true;
}

bool InstanceRead::systemInstanceIsSet() const
{
    return m_systemInstanceIsSet;
}

void InstanceRead::unsetsystemInstance()
{
    m_systemInstanceIsSet = false;
}
std::shared_ptr<DetectorMode> InstanceRead::getDetectorMode() const
{
    return m_detectorMode;
}

void InstanceRead::setDetectorMode(const std::shared_ptr<DetectorMode>& value)
{
    m_detectorMode = value;
    m_detectorModeIsSet = true;
}

bool InstanceRead::detectorModeIsSet() const
{
    return m_detectorModeIsSet;
}

void InstanceRead::unsetdetectorMode()
{
    m_detectorModeIsSet = false;
}
std::shared_ptr<Sensitivity> InstanceRead::getDetectionSensitivity() const
{
    return m_detectionSensitivity;
}

void InstanceRead::setDetectionSensitivity(const std::shared_ptr<Sensitivity>& value)
{
    m_detectionSensitivity = value;
    m_detectionSensitivityIsSet = true;
}

bool InstanceRead::detectionSensitivityIsSet() const
{
    return m_detectionSensitivityIsSet;
}

void InstanceRead::unsetdetectionSensitivity()
{
    m_detectionSensitivityIsSet = false;
}
std::shared_ptr<Sensitivity> InstanceRead::getMovementSensitivity() const
{
    return m_movementSensitivity;
}

void InstanceRead::setMovementSensitivity(const std::shared_ptr<Sensitivity>& value)
{
    m_movementSensitivity = value;
    m_movementSensitivityIsSet = true;
}

bool InstanceRead::movementSensitivityIsSet() const
{
    return m_movementSensitivityIsSet;
}

void InstanceRead::unsetmovementSensitivity()
{
    m_movementSensitivityIsSet = false;
}
std::shared_ptr<SensorModality> InstanceRead::getSensorModality() const
{
    return m_sensorModality;
}

void InstanceRead::setSensorModality(const std::shared_ptr<SensorModality>& value)
{
    m_sensorModality = value;
    m_sensorModalityIsSet = true;
}

bool InstanceRead::sensorModalityIsSet() const
{
    return m_sensorModalityIsSet;
}

void InstanceRead::unsetsensorModality()
{
    m_sensorModalityIsSet = false;
}
}
}
}
}
}


