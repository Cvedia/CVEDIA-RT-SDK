/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "rt_rest_client/model/SecuRTInstanceStats.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



SecuRTInstanceStats::SecuRTInstanceStats()
{
    m_startTime = 0L;
    m_startTimeIsSet = false;
    m_frameRate = 0.0f;
    m_frameRateIsSet = false;
    m_latency = 0.0f;
    m_latencyIsSet = false;
    m_framesProcessed = 0;
    m_framesProcessedIsSet = false;
    m_trackCount = 0;
    m_trackCountIsSet = false;
    m_isRunning = false;
    m_isRunningIsSet = false;
}

SecuRTInstanceStats::~SecuRTInstanceStats()
{
}

void SecuRTInstanceStats::validate()
{
    // TODO: implement validation
}

web::json::value SecuRTInstanceStats::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_startTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("startTime"))] = ModelBase::toJson(m_startTime);
    }
    if(m_frameRateIsSet)
    {
        val[utility::conversions::to_string_t(U("frameRate"))] = ModelBase::toJson(m_frameRate);
    }
    if(m_latencyIsSet)
    {
        val[utility::conversions::to_string_t(U("latency"))] = ModelBase::toJson(m_latency);
    }
    if(m_framesProcessedIsSet)
    {
        val[utility::conversions::to_string_t(U("framesProcessed"))] = ModelBase::toJson(m_framesProcessed);
    }
    if(m_trackCountIsSet)
    {
        val[utility::conversions::to_string_t(U("trackCount"))] = ModelBase::toJson(m_trackCount);
    }
    if(m_isRunningIsSet)
    {
        val[utility::conversions::to_string_t(U("isRunning"))] = ModelBase::toJson(m_isRunning);
    }

    return val;
}

bool SecuRTInstanceStats::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("startTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startTime")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTime);
            setStartTime(refVal_setStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frameRate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frameRate")));
        if(!fieldValue.is_null())
        {
            float refVal_setFrameRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrameRate);
            setFrameRate(refVal_setFrameRate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("latency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("latency")));
        if(!fieldValue.is_null())
        {
            float refVal_setLatency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLatency);
            setLatency(refVal_setLatency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("framesProcessed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("framesProcessed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFramesProcessed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFramesProcessed);
            setFramesProcessed(refVal_setFramesProcessed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trackCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trackCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrackCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackCount);
            setTrackCount(refVal_setTrackCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isRunning"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isRunning")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsRunning;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsRunning);
            setIsRunning(refVal_setIsRunning);
        }
    }
    return ok;
}

void SecuRTInstanceStats::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_startTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startTime")), m_startTime));
    }
    if(m_frameRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frameRate")), m_frameRate));
    }
    if(m_latencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("latency")), m_latency));
    }
    if(m_framesProcessedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("framesProcessed")), m_framesProcessed));
    }
    if(m_trackCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trackCount")), m_trackCount));
    }
    if(m_isRunningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isRunning")), m_isRunning));
    }
}

bool SecuRTInstanceStats::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("startTime"))))
    {
        int64_t refVal_setStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startTime"))), refVal_setStartTime );
        setStartTime(refVal_setStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frameRate"))))
    {
        float refVal_setFrameRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frameRate"))), refVal_setFrameRate );
        setFrameRate(refVal_setFrameRate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("latency"))))
    {
        float refVal_setLatency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("latency"))), refVal_setLatency );
        setLatency(refVal_setLatency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("framesProcessed"))))
    {
        int32_t refVal_setFramesProcessed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("framesProcessed"))), refVal_setFramesProcessed );
        setFramesProcessed(refVal_setFramesProcessed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trackCount"))))
    {
        int32_t refVal_setTrackCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trackCount"))), refVal_setTrackCount );
        setTrackCount(refVal_setTrackCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isRunning"))))
    {
        bool refVal_setIsRunning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isRunning"))), refVal_setIsRunning );
        setIsRunning(refVal_setIsRunning);
    }
    return ok;
}

int64_t SecuRTInstanceStats::getStartTime() const
{
    return m_startTime;
}

void SecuRTInstanceStats::setStartTime(int64_t value)
{
    m_startTime = value;
    m_startTimeIsSet = true;
}

bool SecuRTInstanceStats::startTimeIsSet() const
{
    return m_startTimeIsSet;
}

void SecuRTInstanceStats::unsetstartTime()
{
    m_startTimeIsSet = false;
}
float SecuRTInstanceStats::getFrameRate() const
{
    return m_frameRate;
}

void SecuRTInstanceStats::setFrameRate(float value)
{
    m_frameRate = value;
    m_frameRateIsSet = true;
}

bool SecuRTInstanceStats::frameRateIsSet() const
{
    return m_frameRateIsSet;
}

void SecuRTInstanceStats::unsetframeRate()
{
    m_frameRateIsSet = false;
}
float SecuRTInstanceStats::getLatency() const
{
    return m_latency;
}

void SecuRTInstanceStats::setLatency(float value)
{
    m_latency = value;
    m_latencyIsSet = true;
}

bool SecuRTInstanceStats::latencyIsSet() const
{
    return m_latencyIsSet;
}

void SecuRTInstanceStats::unsetlatency()
{
    m_latencyIsSet = false;
}
int32_t SecuRTInstanceStats::getFramesProcessed() const
{
    return m_framesProcessed;
}

void SecuRTInstanceStats::setFramesProcessed(int32_t value)
{
    m_framesProcessed = value;
    m_framesProcessedIsSet = true;
}

bool SecuRTInstanceStats::framesProcessedIsSet() const
{
    return m_framesProcessedIsSet;
}

void SecuRTInstanceStats::unsetframesProcessed()
{
    m_framesProcessedIsSet = false;
}
int32_t SecuRTInstanceStats::getTrackCount() const
{
    return m_trackCount;
}

void SecuRTInstanceStats::setTrackCount(int32_t value)
{
    m_trackCount = value;
    m_trackCountIsSet = true;
}

bool SecuRTInstanceStats::trackCountIsSet() const
{
    return m_trackCountIsSet;
}

void SecuRTInstanceStats::unsettrackCount()
{
    m_trackCountIsSet = false;
}
bool SecuRTInstanceStats::isIsRunning() const
{
    return m_isRunning;
}

void SecuRTInstanceStats::setIsRunning(bool value)
{
    m_isRunning = value;
    m_isRunningIsSet = true;
}

bool SecuRTInstanceStats::isRunningIsSet() const
{
    return m_isRunningIsSet;
}

void SecuRTInstanceStats::unsetisRunning()
{
    m_isRunningIsSet = false;
}
}
}
}
}
}


