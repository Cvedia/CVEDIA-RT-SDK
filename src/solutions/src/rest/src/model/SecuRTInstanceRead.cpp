/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "securt_rest_client/model/SecuRTInstanceRead.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



SecuRTInstanceRead::SecuRTInstanceRead()
{
    m_id = utility::conversions::to_string_t("");
    m_idIsSet = false;
    m_name = utility::conversions::to_string_t("");
    m_nameIsSet = false;
    m_version = utility::conversions::to_string_t("");
    m_versionIsSet = false;
    m_detectorModeIsSet = false;
    m_detectionSensitivityIsSet = false;
    m_movementSensitivityIsSet = false;
    m_sensorModalityIsSet = false;
    m_metadataMode = false;
    m_metadataModeIsSet = false;
    m_statisticsMode = false;
    m_statisticsModeIsSet = false;
    m_diagnosticsMode = false;
    m_diagnosticsModeIsSet = false;
    m_debugMode = false;
    m_debugModeIsSet = false;
    m_frameRateLimit = 0.0;
    m_frameRateLimitIsSet = false;
}

SecuRTInstanceRead::~SecuRTInstanceRead()
{
}

void SecuRTInstanceRead::validate()
{
    // TODO: implement validation
}

web::json::value SecuRTInstanceRead::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_idIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_id);
    }
    if(m_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_name);
    }
    if(m_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_version);
    }
    if(m_detectorModeIsSet)
    {
        val[utility::conversions::to_string_t(U("detectorMode"))] = ModelBase::toJson(m_detectorMode);
    }
    if(m_detectionSensitivityIsSet)
    {
        val[utility::conversions::to_string_t(U("detectionSensitivity"))] = ModelBase::toJson(m_detectionSensitivity);
    }
    if(m_movementSensitivityIsSet)
    {
        val[utility::conversions::to_string_t(U("movementSensitivity"))] = ModelBase::toJson(m_movementSensitivity);
    }
    if(m_sensorModalityIsSet)
    {
        val[utility::conversions::to_string_t(U("sensorModality"))] = ModelBase::toJson(m_sensorModality);
    }
    if(m_metadataModeIsSet)
    {
        val[utility::conversions::to_string_t(U("metadataMode"))] = ModelBase::toJson(m_metadataMode);
    }
    if(m_statisticsModeIsSet)
    {
        val[utility::conversions::to_string_t(U("statisticsMode"))] = ModelBase::toJson(m_statisticsMode);
    }
    if(m_diagnosticsModeIsSet)
    {
        val[utility::conversions::to_string_t(U("diagnosticsMode"))] = ModelBase::toJson(m_diagnosticsMode);
    }
    if(m_debugModeIsSet)
    {
        val[utility::conversions::to_string_t(U("debugMode"))] = ModelBase::toJson(m_debugMode);
    }
    if(m_frameRateLimitIsSet)
    {
        val[utility::conversions::to_string_t(U("frameRateLimit"))] = ModelBase::toJson(m_frameRateLimit);
    }

    return val;
}

bool SecuRTInstanceRead::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("detectorMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("detectorMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DetectorMode> refVal_setDetectorMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetectorMode);
            setDetectorMode(refVal_setDetectorMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("detectionSensitivity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("detectionSensitivity")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Sensitivity> refVal_setDetectionSensitivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetectionSensitivity);
            setDetectionSensitivity(refVal_setDetectionSensitivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("movementSensitivity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("movementSensitivity")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Sensitivity> refVal_setMovementSensitivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMovementSensitivity);
            setMovementSensitivity(refVal_setMovementSensitivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sensorModality"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sensorModality")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SensorModality> refVal_setSensorModality;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSensorModality);
            setSensorModality(refVal_setSensorModality);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metadataMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metadataMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setMetadataMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadataMode);
            setMetadataMode(refVal_setMetadataMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statisticsMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statisticsMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStatisticsMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatisticsMode);
            setStatisticsMode(refVal_setStatisticsMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("diagnosticsMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("diagnosticsMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDiagnosticsMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiagnosticsMode);
            setDiagnosticsMode(refVal_setDiagnosticsMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("debugMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("debugMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDebugMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDebugMode);
            setDebugMode(refVal_setDebugMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frameRateLimit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frameRateLimit")));
        if(!fieldValue.is_null())
        {
            double refVal_setFrameRateLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrameRateLimit);
            setFrameRateLimit(refVal_setFrameRateLimit);
        }
    }
    return ok;
}

void SecuRTInstanceRead::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_id));
    }
    if(m_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_name));
    }
    if(m_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_version));
    }
    if(m_detectorModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("detectorMode")), m_detectorMode));
    }
    if(m_detectionSensitivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("detectionSensitivity")), m_detectionSensitivity));
    }
    if(m_movementSensitivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("movementSensitivity")), m_movementSensitivity));
    }
    if(m_sensorModalityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sensorModality")), m_sensorModality));
    }
    if(m_metadataModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metadataMode")), m_metadataMode));
    }
    if(m_statisticsModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statisticsMode")), m_statisticsMode));
    }
    if(m_diagnosticsModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("diagnosticsMode")), m_diagnosticsMode));
    }
    if(m_debugModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("debugMode")), m_debugMode));
    }
    if(m_frameRateLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frameRateLimit")), m_frameRateLimit));
    }
}

bool SecuRTInstanceRead::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("detectorMode"))))
    {
        std::shared_ptr<DetectorMode> refVal_setDetectorMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("detectorMode"))), refVal_setDetectorMode );
        setDetectorMode(refVal_setDetectorMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("detectionSensitivity"))))
    {
        std::shared_ptr<Sensitivity> refVal_setDetectionSensitivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("detectionSensitivity"))), refVal_setDetectionSensitivity );
        setDetectionSensitivity(refVal_setDetectionSensitivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("movementSensitivity"))))
    {
        std::shared_ptr<Sensitivity> refVal_setMovementSensitivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("movementSensitivity"))), refVal_setMovementSensitivity );
        setMovementSensitivity(refVal_setMovementSensitivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sensorModality"))))
    {
        std::shared_ptr<SensorModality> refVal_setSensorModality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sensorModality"))), refVal_setSensorModality );
        setSensorModality(refVal_setSensorModality);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metadataMode"))))
    {
        bool refVal_setMetadataMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metadataMode"))), refVal_setMetadataMode );
        setMetadataMode(refVal_setMetadataMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statisticsMode"))))
    {
        bool refVal_setStatisticsMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statisticsMode"))), refVal_setStatisticsMode );
        setStatisticsMode(refVal_setStatisticsMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("diagnosticsMode"))))
    {
        bool refVal_setDiagnosticsMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("diagnosticsMode"))), refVal_setDiagnosticsMode );
        setDiagnosticsMode(refVal_setDiagnosticsMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("debugMode"))))
    {
        bool refVal_setDebugMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("debugMode"))), refVal_setDebugMode );
        setDebugMode(refVal_setDebugMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frameRateLimit"))))
    {
        double refVal_setFrameRateLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frameRateLimit"))), refVal_setFrameRateLimit );
        setFrameRateLimit(refVal_setFrameRateLimit);
    }
    return ok;
}

utility::string_t SecuRTInstanceRead::getId() const
{
    return m_id;
}

void SecuRTInstanceRead::setId(const utility::string_t& value)
{
    m_id = value;
    m_idIsSet = true;
}

bool SecuRTInstanceRead::idIsSet() const
{
    return m_idIsSet;
}

void SecuRTInstanceRead::unsetid()
{
    m_idIsSet = false;
}
utility::string_t SecuRTInstanceRead::getName() const
{
    return m_name;
}

void SecuRTInstanceRead::setName(const utility::string_t& value)
{
    m_name = value;
    m_nameIsSet = true;
}

bool SecuRTInstanceRead::nameIsSet() const
{
    return m_nameIsSet;
}

void SecuRTInstanceRead::unsetname()
{
    m_nameIsSet = false;
}
utility::string_t SecuRTInstanceRead::getVersion() const
{
    return m_version;
}

void SecuRTInstanceRead::setVersion(const utility::string_t& value)
{
    m_version = value;
    m_versionIsSet = true;
}

bool SecuRTInstanceRead::versionIsSet() const
{
    return m_versionIsSet;
}

void SecuRTInstanceRead::unsetversion()
{
    m_versionIsSet = false;
}
std::shared_ptr<DetectorMode> SecuRTInstanceRead::getDetectorMode() const
{
    return m_detectorMode;
}

void SecuRTInstanceRead::setDetectorMode(const std::shared_ptr<DetectorMode>& value)
{
    m_detectorMode = value;
    m_detectorModeIsSet = true;
}

bool SecuRTInstanceRead::detectorModeIsSet() const
{
    return m_detectorModeIsSet;
}

void SecuRTInstanceRead::unsetdetectorMode()
{
    m_detectorModeIsSet = false;
}
std::shared_ptr<Sensitivity> SecuRTInstanceRead::getDetectionSensitivity() const
{
    return m_detectionSensitivity;
}

void SecuRTInstanceRead::setDetectionSensitivity(const std::shared_ptr<Sensitivity>& value)
{
    m_detectionSensitivity = value;
    m_detectionSensitivityIsSet = true;
}

bool SecuRTInstanceRead::detectionSensitivityIsSet() const
{
    return m_detectionSensitivityIsSet;
}

void SecuRTInstanceRead::unsetdetectionSensitivity()
{
    m_detectionSensitivityIsSet = false;
}
std::shared_ptr<Sensitivity> SecuRTInstanceRead::getMovementSensitivity() const
{
    return m_movementSensitivity;
}

void SecuRTInstanceRead::setMovementSensitivity(const std::shared_ptr<Sensitivity>& value)
{
    m_movementSensitivity = value;
    m_movementSensitivityIsSet = true;
}

bool SecuRTInstanceRead::movementSensitivityIsSet() const
{
    return m_movementSensitivityIsSet;
}

void SecuRTInstanceRead::unsetmovementSensitivity()
{
    m_movementSensitivityIsSet = false;
}
std::shared_ptr<SensorModality> SecuRTInstanceRead::getSensorModality() const
{
    return m_sensorModality;
}

void SecuRTInstanceRead::setSensorModality(const std::shared_ptr<SensorModality>& value)
{
    m_sensorModality = value;
    m_sensorModalityIsSet = true;
}

bool SecuRTInstanceRead::sensorModalityIsSet() const
{
    return m_sensorModalityIsSet;
}

void SecuRTInstanceRead::unsetsensorModality()
{
    m_sensorModalityIsSet = false;
}
bool SecuRTInstanceRead::isMetadataMode() const
{
    return m_metadataMode;
}

void SecuRTInstanceRead::setMetadataMode(bool value)
{
    m_metadataMode = value;
    m_metadataModeIsSet = true;
}

bool SecuRTInstanceRead::metadataModeIsSet() const
{
    return m_metadataModeIsSet;
}

void SecuRTInstanceRead::unsetmetadataMode()
{
    m_metadataModeIsSet = false;
}
bool SecuRTInstanceRead::isStatisticsMode() const
{
    return m_statisticsMode;
}

void SecuRTInstanceRead::setStatisticsMode(bool value)
{
    m_statisticsMode = value;
    m_statisticsModeIsSet = true;
}

bool SecuRTInstanceRead::statisticsModeIsSet() const
{
    return m_statisticsModeIsSet;
}

void SecuRTInstanceRead::unsetstatisticsMode()
{
    m_statisticsModeIsSet = false;
}
bool SecuRTInstanceRead::isDiagnosticsMode() const
{
    return m_diagnosticsMode;
}

void SecuRTInstanceRead::setDiagnosticsMode(bool value)
{
    m_diagnosticsMode = value;
    m_diagnosticsModeIsSet = true;
}

bool SecuRTInstanceRead::diagnosticsModeIsSet() const
{
    return m_diagnosticsModeIsSet;
}

void SecuRTInstanceRead::unsetdiagnosticsMode()
{
    m_diagnosticsModeIsSet = false;
}
bool SecuRTInstanceRead::isDebugMode() const
{
    return m_debugMode;
}

void SecuRTInstanceRead::setDebugMode(bool value)
{
    m_debugMode = value;
    m_debugModeIsSet = true;
}

bool SecuRTInstanceRead::debugModeIsSet() const
{
    return m_debugModeIsSet;
}

void SecuRTInstanceRead::unsetdebugMode()
{
    m_debugModeIsSet = false;
}
double SecuRTInstanceRead::getFrameRateLimit() const
{
    return m_frameRateLimit;
}

void SecuRTInstanceRead::setFrameRateLimit(double value)
{
    m_frameRateLimit = value;
    m_frameRateLimitIsSet = true;
}

bool SecuRTInstanceRead::frameRateLimitIsSet() const
{
    return m_frameRateLimitIsSet;
}

void SecuRTInstanceRead::unsetframeRateLimit()
{
    m_frameRateLimitIsSet = false;
}
}
}
}
}
}


