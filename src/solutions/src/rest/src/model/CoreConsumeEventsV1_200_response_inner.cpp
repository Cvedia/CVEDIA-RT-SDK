/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.2.0
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "rt_rest_client/model/CoreConsumeEventsV1_200_response_inner.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {



CoreConsumeEventsV1_200_response_inner::CoreConsumeEventsV1_200_response_inner()
{
    m_dataType = utility::conversions::to_string_t("");
    m_dataTypeIsSet = false;
    m_jsonObject = utility::conversions::to_string_t("");
    m_jsonObjectIsSet = false;
}

CoreConsumeEventsV1_200_response_inner::~CoreConsumeEventsV1_200_response_inner()
{
}

void CoreConsumeEventsV1_200_response_inner::validate()
{
    // TODO: implement validation
}

web::json::value CoreConsumeEventsV1_200_response_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_dataTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("dataType"))] = ModelBase::toJson(m_dataType);
    }
    if(m_jsonObjectIsSet)
    {
        val[utility::conversions::to_string_t(U("jsonObject"))] = ModelBase::toJson(m_jsonObject);
    }

    return val;
}

bool CoreConsumeEventsV1_200_response_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("dataType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dataType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataType);
            setDataType(refVal_setDataType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jsonObject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jsonObject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setJsonObject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJsonObject);
            setJsonObject(refVal_setJsonObject);
        }
    }
    return ok;
}

void CoreConsumeEventsV1_200_response_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_dataTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dataType")), m_dataType));
    }
    if(m_jsonObjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jsonObject")), m_jsonObject));
    }
}

bool CoreConsumeEventsV1_200_response_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("dataType"))))
    {
        utility::string_t refVal_setDataType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dataType"))), refVal_setDataType );
        setDataType(refVal_setDataType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jsonObject"))))
    {
        utility::string_t refVal_setJsonObject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jsonObject"))), refVal_setJsonObject );
        setJsonObject(refVal_setJsonObject);
    }
    return ok;
}

utility::string_t CoreConsumeEventsV1_200_response_inner::getDataType() const
{
    return m_dataType;
}

void CoreConsumeEventsV1_200_response_inner::setDataType(const utility::string_t& value)
{
    m_dataType = value;
    m_dataTypeIsSet = true;
}

bool CoreConsumeEventsV1_200_response_inner::dataTypeIsSet() const
{
    return m_dataTypeIsSet;
}

void CoreConsumeEventsV1_200_response_inner::unsetdataType()
{
    m_dataTypeIsSet = false;
}
utility::string_t CoreConsumeEventsV1_200_response_inner::getJsonObject() const
{
    return m_jsonObject;
}

void CoreConsumeEventsV1_200_response_inner::setJsonObject(const utility::string_t& value)
{
    m_jsonObject = value;
    m_jsonObjectIsSet = true;
}

bool CoreConsumeEventsV1_200_response_inner::jsonObjectIsSet() const
{
    return m_jsonObjectIsSet;
}

void CoreConsumeEventsV1_200_response_inner::unsetjsonObject()
{
    m_jsonObjectIsSet = false;
}
}
}
}
}
}


