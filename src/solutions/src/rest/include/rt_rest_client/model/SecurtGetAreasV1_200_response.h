/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SecurtGetAreasV1_200_response.h
 *
 * 
 */

#ifndef CVEDIA_RT_REST_CLIENT_MODEL_SecurtGetAreasV1_200_response_H_
#define CVEDIA_RT_REST_CLIENT_MODEL_SecurtGetAreasV1_200_response_H_


#include "defines.h"
#include "rt_rest_client/ModelBase.h"

#include "rt_rest_client/model/AreaCrossingRead.h"
#include "rt_rest_client/model/AreaCrowdingRead.h"
#include "rt_rest_client/model/AreaLoiteringRead.h"
#include <vector>
#include "rt_rest_client/model/AreaIntrusionRead.h"

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {

class AreaCrossingRead;
class AreaIntrusionRead;
class AreaLoiteringRead;
class AreaCrowdingRead;

/// <summary>
/// 
/// </summary>
class EXPORT_CLASS  SecurtGetAreasV1_200_response
    : public ModelBase
{
public:
    EXPORT SecurtGetAreasV1_200_response();
    EXPORT virtual ~SecurtGetAreasV1_200_response();

    /////////////////////////////////////////////
    /// ModelBase overrides

    EXPORT void validate() override;

    EXPORT web::json::value toJson() const override;
    EXPORT bool fromJson(const web::json::value& json) override;

    EXPORT void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    EXPORT bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SecurtGetAreasV1_200_response members

    /// <summary>
    /// 
    /// </summary>
    EXPORT std::vector<std::shared_ptr<AreaCrossingRead>>& getCrossingAreas();
    EXPORT bool crossingAreasIsSet() const;
    EXPORT void unsetcrossingAreas();

    EXPORT void setCrossingAreas(const std::vector<std::shared_ptr<AreaCrossingRead>>& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT std::vector<std::shared_ptr<AreaIntrusionRead>>& getIntrusionAreas();
    EXPORT bool intrusionAreasIsSet() const;
    EXPORT void unsetintrusionAreas();

    EXPORT void setIntrusionAreas(const std::vector<std::shared_ptr<AreaIntrusionRead>>& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT std::vector<std::shared_ptr<AreaLoiteringRead>>& getLoiteringAreas();
    EXPORT bool loiteringAreasIsSet() const;
    EXPORT void unsetloiteringAreas();

    EXPORT void setLoiteringAreas(const std::vector<std::shared_ptr<AreaLoiteringRead>>& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT std::vector<std::shared_ptr<AreaCrowdingRead>>& getCrowdingAreas();
    EXPORT bool crowdingAreasIsSet() const;
    EXPORT void unsetcrowdingAreas();

    EXPORT void setCrowdingAreas(const std::vector<std::shared_ptr<AreaCrowdingRead>>& value);


protected:
    std::vector<std::shared_ptr<AreaCrossingRead>> m_crossingAreas;
    bool m_crossingAreasIsSet;
    std::vector<std::shared_ptr<AreaIntrusionRead>> m_intrusionAreas;
    bool m_intrusionAreasIsSet;
    std::vector<std::shared_ptr<AreaLoiteringRead>> m_loiteringAreas;
    bool m_loiteringAreasIsSet;
    std::vector<std::shared_ptr<AreaCrowdingRead>> m_crowdingAreas;
    bool m_crowdingAreasIsSet;
};


}
}
}
}
}

#endif /* CVEDIA_RT_REST_CLIENT_MODEL_SecurtGetAreasV1_200_response_H_ */
