/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.2.3
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InstanceRead.h
 *
 * 
 */

#ifndef CVEDIA_RT_REST_CLIENT_MODEL_InstanceRead_H_
#define CVEDIA_RT_REST_CLIENT_MODEL_InstanceRead_H_


#include "defines.h"
#include "rt_rest_client/ModelBase.h"

#include "rt_rest_client/model/Sensitivity.h"
#include "rt_rest_client/model/SensorModality.h"
#include "rt_rest_client/model/DetectorMode.h"
#include <cpprest/details/basic_types.h>

namespace cvedia {
namespace rt {
namespace rest {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class EXPORT_CLASS  InstanceRead
    : public ModelBase
{
public:
    EXPORT InstanceRead();
    EXPORT virtual ~InstanceRead();

    /////////////////////////////////////////////
    /// ModelBase overrides

    EXPORT void validate() override;

    EXPORT web::json::value toJson() const override;
    EXPORT bool fromJson(const web::json::value& json) override;

    EXPORT void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    EXPORT bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InstanceRead members

    /// <summary>
    /// 
    /// </summary>
    EXPORT utility::string_t getInstanceId() const;
    EXPORT bool instanceIdIsSet() const;
    EXPORT void unsetinstanceId();

    EXPORT void setInstanceId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT utility::string_t getDisplayName() const;
    EXPORT bool displayNameIsSet() const;
    EXPORT void unsetdisplayName();

    EXPORT void setDisplayName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT utility::string_t getGroup() const;
    EXPORT bool groupIsSet() const;
    EXPORT void unsetgroup();

    EXPORT void setGroup(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT utility::string_t getSolutionId() const;
    EXPORT bool solutionIdIsSet() const;
    EXPORT void unsetsolutionId();

    EXPORT void setSolutionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT utility::string_t getSolutionName() const;
    EXPORT bool solutionNameIsSet() const;
    EXPORT void unsetsolutionName();

    EXPORT void setSolutionName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isPersistent() const;
    EXPORT bool persistentIsSet() const;
    EXPORT void unsetpersistent();

    EXPORT void setPersistent(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isLoaded() const;
    EXPORT bool loadedIsSet() const;
    EXPORT void unsetloaded();

    EXPORT void setLoaded(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isRunning() const;
    EXPORT bool runningIsSet() const;
    EXPORT void unsetrunning();

    EXPORT void setRunning(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT float getFps() const;
    EXPORT bool fpsIsSet() const;
    EXPORT void unsetfps();

    EXPORT void setFps(float value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT utility::string_t getVersion() const;
    EXPORT bool versionIsSet() const;
    EXPORT void unsetversion();

    EXPORT void setVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT double getFrameRateLimit() const;
    EXPORT bool frameRateLimitIsSet() const;
    EXPORT void unsetframeRateLimit();

    EXPORT void setFrameRateLimit(double value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isMetadataMode() const;
    EXPORT bool metadataModeIsSet() const;
    EXPORT void unsetmetadataMode();

    EXPORT void setMetadataMode(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isStatisticsMode() const;
    EXPORT bool statisticsModeIsSet() const;
    EXPORT void unsetstatisticsMode();

    EXPORT void setStatisticsMode(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isDiagnosticsMode() const;
    EXPORT bool diagnosticsModeIsSet() const;
    EXPORT void unsetdiagnosticsMode();

    EXPORT void setDiagnosticsMode(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isDebugMode() const;
    EXPORT bool debugModeIsSet() const;
    EXPORT void unsetdebugMode();

    EXPORT void setDebugMode(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isReadOnly() const;
    EXPORT bool readOnlyIsSet() const;
    EXPORT void unsetreadOnly();

    EXPORT void setReadOnly(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isAutoStart() const;
    EXPORT bool autoStartIsSet() const;
    EXPORT void unsetautoStart();

    EXPORT void setAutoStart(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isAutoRestart() const;
    EXPORT bool autoRestartIsSet() const;
    EXPORT void unsetautoRestart();

    EXPORT void setAutoRestart(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT bool isSystemInstance() const;
    EXPORT bool systemInstanceIsSet() const;
    EXPORT void unsetsystemInstance();

    EXPORT void setSystemInstance(bool value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT std::shared_ptr<DetectorMode> getDetectorMode() const;
    EXPORT bool detectorModeIsSet() const;
    EXPORT void unsetdetectorMode();

    EXPORT void setDetectorMode(const std::shared_ptr<DetectorMode>& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT std::shared_ptr<Sensitivity> getDetectionSensitivity() const;
    EXPORT bool detectionSensitivityIsSet() const;
    EXPORT void unsetdetectionSensitivity();

    EXPORT void setDetectionSensitivity(const std::shared_ptr<Sensitivity>& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT std::shared_ptr<Sensitivity> getMovementSensitivity() const;
    EXPORT bool movementSensitivityIsSet() const;
    EXPORT void unsetmovementSensitivity();

    EXPORT void setMovementSensitivity(const std::shared_ptr<Sensitivity>& value);

    /// <summary>
    /// 
    /// </summary>
    EXPORT std::shared_ptr<SensorModality> getSensorModality() const;
    EXPORT bool sensorModalityIsSet() const;
    EXPORT void unsetsensorModality();

    EXPORT void setSensorModality(const std::shared_ptr<SensorModality>& value);


protected:
    utility::string_t m_instanceId;
    bool m_instanceIdIsSet;
    utility::string_t m_displayName;
    bool m_displayNameIsSet;
    utility::string_t m_group;
    bool m_groupIsSet;
    utility::string_t m_solutionId;
    bool m_solutionIdIsSet;
    utility::string_t m_solutionName;
    bool m_solutionNameIsSet;
    bool m_persistent;
    bool m_persistentIsSet;
    bool m_loaded;
    bool m_loadedIsSet;
    bool m_running;
    bool m_runningIsSet;
    float m_fps;
    bool m_fpsIsSet;
    utility::string_t m_version;
    bool m_versionIsSet;
    double m_frameRateLimit;
    bool m_frameRateLimitIsSet;
    bool m_metadataMode;
    bool m_metadataModeIsSet;
    bool m_statisticsMode;
    bool m_statisticsModeIsSet;
    bool m_diagnosticsMode;
    bool m_diagnosticsModeIsSet;
    bool m_debugMode;
    bool m_debugModeIsSet;
    bool m_readOnly;
    bool m_readOnlyIsSet;
    bool m_autoStart;
    bool m_autoStartIsSet;
    bool m_autoRestart;
    bool m_autoRestartIsSet;
    bool m_systemInstance;
    bool m_systemInstanceIsSet;
    std::shared_ptr<DetectorMode> m_detectorMode;
    bool m_detectorModeIsSet;
    std::shared_ptr<Sensitivity> m_detectionSensitivity;
    bool m_detectionSensitivityIsSet;
    std::shared_ptr<Sensitivity> m_movementSensitivity;
    bool m_movementSensitivityIsSet;
    std::shared_ptr<SensorModality> m_sensorModality;
    bool m_sensorModalityIsSet;
};


}
}
}
}
}

#endif /* CVEDIA_RT_REST_CLIENT_MODEL_InstanceRead_H_ */
