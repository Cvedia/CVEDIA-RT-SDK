/**
 * CVEDIA-RT
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024.2.2
 * Contact: support@cvedia.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SecuRTApi.h
 *
 * 
 */

#ifndef CVEDIA_RT_REST_CLIENT_SecuRTApi_H_
#define CVEDIA_RT_REST_CLIENT_SecuRTApi_H_


#include "defines.h"

#include "rt_rest_client/ApiClient.h"

#include "rt_rest_client/model/SecuRTInstanceStats.h"
#include "rt_rest_client/model/SecuRTInstanceWrite.h"
#include "rt_rest_client/model/SecurtGetAnalyticsEntitiesV1_200_response.h"
#include "rt_rest_client/model/SecurtPostInstanceV1_201_response.h"
#include "rt_rest_client/model/SecurtPostInstanceV1_request.h"
#include "rt_rest_client/model/SecurtSetAppearanceSearchV1_request.h"
#include "rt_rest_client/model/SecurtSetExclusionAreasV1_request.h"
#include "rt_rest_client/model/SecurtSetMotionAreaV1_request.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace cvedia {
namespace rt {
namespace rest {
namespace client {

using namespace cvedia::rt::rest::client::model;



class  SecuRTApi 
{
public:

    EXPORT explicit SecuRTApi( std::shared_ptr<const ApiClient> apiClient );

    EXPORT virtual ~SecuRTApi();

    /// <summary>
    /// Delete an instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="instanceId">The unique identifier for the Securt instance that needs to be created or deleted.</param>
    EXPORT pplx::task<void> securtDeleteInstanceV1(
        utility::string_t instanceId
    ) const;
    /// <summary>
    /// Get all analytics entities (lines/areas)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="instanceId"></param>
    EXPORT pplx::task<std::shared_ptr<SecurtGetAnalyticsEntitiesV1_200_response>> securtGetAnalyticsEntitiesV1(
        utility::string_t instanceId
    ) const;
    /// <summary>
    /// Get instance stats
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="instanceId"></param>
    EXPORT pplx::task<std::shared_ptr<SecuRTInstanceStats>> securtGetInstanceStatsV1(
        utility::string_t instanceId
    ) const;
    /// <summary>
    /// Update an instance
    /// </summary>
    /// <remarks>
    /// This endpoint allows clients to update a SecuRT instance.
    /// </remarks>
    /// <param name="instanceId">The unique identifier for the Securt instance that needs to be created or deleted.</param>
    /// <param name="secuRTInstanceWrite"> (optional)</param>
    EXPORT pplx::task<void> securtPatchInstanceV1(
        utility::string_t instanceId,
        boost::optional<std::shared_ptr<SecuRTInstanceWrite>> secuRTInstanceWrite
    ) const;
    /// <summary>
    /// Create a new instance
    /// </summary>
    /// <remarks>
    /// This endpoint allows clients to create a new SecuRT instance. Upon successful creation, the service returns a unique instance identifier (&#x60;instanceId&#x60;). Clients are required to provide the name of the instance in the request body, which will be used for display purposes throughout the lifecycle of the instance.
    /// </remarks>
    /// <param name="securtPostInstanceV1Request">JSON payload containing the name of the new SecuRT instance. (optional)</param>
    EXPORT pplx::task<std::shared_ptr<SecurtPostInstanceV1_201_response>> securtPostInstanceV1(
        boost::optional<std::shared_ptr<SecurtPostInstanceV1_request>> securtPostInstanceV1Request
    ) const;
    /// <summary>
    /// Create an instance
    /// </summary>
    /// <remarks>
    /// This endpoint allows clients to create a SecuRT instance with the provided instance id.
    /// </remarks>
    /// <param name="instanceId">The unique identifier for the Securt instance that needs to be created or deleted.</param>
    /// <param name="secuRTInstanceWrite"> (optional)</param>
    EXPORT pplx::task<void> securtPutInstanceV1(
        utility::string_t instanceId,
        boost::optional<std::shared_ptr<SecuRTInstanceWrite>> secuRTInstanceWrite
    ) const;
    /// <summary>
    /// Set appearance search
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="instanceId"></param>
    /// <param name="securtSetAppearanceSearchV1Request"> (optional)</param>
    EXPORT pplx::task<void> securtSetAppearanceSearchV1(
        utility::string_t instanceId,
        boost::optional<std::shared_ptr<SecurtSetAppearanceSearchV1_request>> securtSetAppearanceSearchV1Request
    ) const;
    /// <summary>
    /// Set exclusion areas
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="instanceId"></param>
    /// <param name="securtSetExclusionAreasV1Request"> (optional)</param>
    EXPORT pplx::task<void> securtSetExclusionAreasV1(
        utility::string_t instanceId,
        boost::optional<std::shared_ptr<SecurtSetExclusionAreasV1_request>> securtSetExclusionAreasV1Request
    ) const;
    /// <summary>
    /// Set motion area
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="instanceId"></param>
    /// <param name="securtSetMotionAreaV1Request"></param>
    EXPORT pplx::task<void> securtSetMotionAreaV1(
        utility::string_t instanceId,
        std::shared_ptr<SecurtSetMotionAreaV1_request> securtSetMotionAreaV1Request
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* CVEDIA_RT_REST_CLIENT_SecuRTApi_H_ */

